{"name":"Captain hoog","tagline":"A Git hook-hook engine written in Ruby","body":"# CaptainHoog\r\n\r\n[![Build Status](https://travis-ci.org/GateprotectGmbH/captain_hoog.svg)](https://travis-ci.org/GateprotectGmbH/captain_hoog)\r\n\r\nOkay. That's not such a funny gem name. But it's a reference to Git and the subject\r\nof the gem: the Git Hooks.\r\n\r\n<img src=\"http://dyxygd30hex7h.cloudfront.net/sites/www.prismaticart.com/files/PRISMATIC_ADAM.jpg\" height=\"450\">\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'captain_hoog'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install captain_hoog\r\n\r\n## Usage\r\n\r\n### Install the hook\r\n\r\n```\r\ngithoog install --type <GIT_HOOK_TYPE> --plugins_dir <PATH_TO_PLUGINS> --project_dir <PATH_TO_PROJECT>\r\n```\r\n\r\n**Please note:**  ```<PATH_TO_PLUGINS>``` and ```<PATH_TO_PROJECT>``` must be given as absolute paths.\r\nAlso make sure to run this from your git repository's root folder.\r\n\r\n```GIT_HOOK_TYPE``` may be something like this\r\n\r\n* pre-commit (default)\r\n* pre-push\r\n* pre-rebase\r\n* pre-applypatch\r\n\r\nIf the directory where pre-git test should be done, differs from the working directory adjust:\r\n\r\n```\r\n--project_dir\r\n```\r\n\r\nto your needs. You can omit this.\r\n\r\n```\r\n--plugins_dir\r\n```\r\n\r\nis not required anymore. If it's omited it will point to the actual directory you run the install script from. It should point to the directory you store the CaptainHoog plugins.\r\n\r\n_A note about plugin directories:_ To have more than one plugin directory used, just add as many plugin directories as you want do the ```plugins_dir``` section in the Hoogfile. You can select which plugin is called from which Git hook later by defining it in the Hoogfile.\r\n\r\n### Removing the hook\r\n\r\nRemove a hook by using the\r\n\r\n```\r\ngithoog remove --type <GIT_HOOK_TYPE>\r\n```\r\n\r\ncommand.\r\n\r\nwhere ```<GIT_HOOK_TYPE>``` is ```pre-commit``` by default.\r\n\r\n### The Hoogfile\r\n\r\nAll plugin executable and ignoring power is configurable in the Hoogfile. The Hoogfile's name is ```hoogfile.yml``` and it will be installed in your Git root directory. If you install several hooks, the installer will ask you if you want to override the config file.\r\n\r\nThe Hoogfile has several sections:\r\n\r\n* hook plugins per type\r\n* project dir\r\n* plugins dir\r\n\r\nSome options are predefined from your information you provided during installation:\r\n\r\n* project dir\r\n* plugins dir\r\n\r\nIf this did not matches your need anymore, just pass the new paths in there.\r\n\r\nCaptain Hoog is doing nothing by default. You have explicitly define which plugins it should run or which not. You do this per hook type. E.g. for ```pre-commit```:\r\n\r\n```\r\npre-commit:\r\n  - cucumber\r\n  - rspec\r\n```\r\n\r\nSo the plugins named **cucumber** and **rspec** are running before your commit applies to the index.\r\n\r\n### Migrating from pre 1.0 versions\r\n\r\nThere is no migration path from previous versions. Just re-install and adjust the Hoogfile to your previous configuration.  \r\n\r\n### Writing plugins\r\n\r\nA CaptainHoog plugin is written with a very simple DSL that used with the following expressions:\r\n\r\n* ```test```\r\n* ```message```\r\n* ```helper```\r\n* ```run```\r\n\r\nWithin ```test``` any stuff is done that either forces the commit to exit or\r\nto pass. Whatever you want to do like syntax checking, code style checking -\r\nimplement it and make sure you return a boolean value.\r\n\r\n```message``` is used to define a notification that is shown to the user if\r\nthe test **fails**. This obviously must return a String.  \r\n\r\nYou have to add a description (or name) to your plugin, this description (or name) will be used to check if the plugin should be executed or not by adding the plugins name to the section <hook plugins per type> of your Hoogfile.\r\n\r\n```rb\r\ngit.describe 'sample' do |pre|\r\n\r\n  pre.test do\r\n    # do any test like code style guide, syntax checking...\r\n    # Must return a boolean value.\r\n  end\r\n\r\n  pre.message do\r\n    # Define a message string here that is shown if the test fails.\r\n  end\r\n\r\nend  \r\n```\r\n\r\nWith ```helper``` you can extract some logic into a helper method that is useable anywhere\r\nin the plugin.\r\n\r\n```rb\r\ngit.describe 'logger' do |pre|\r\n\r\n  pre.helper :collect_logger_outputs do\r\n    # do something\r\n  end\r\n\r\n  pre.test do\r\n    collect_logger_outputs.empty?\r\n  end\r\n\r\n  pre.message do\r\n   %q{ You have some logger outputs in your code! }\r\n  end\r\nend\r\n```\r\n\r\nIf you don't want to test anything before commiting or pushing thus just running\r\na command or something similiar, use the ```run``` method.\r\n\r\n```rb\r\ngit.describe 'name of Git head' do |pre|\r\n\r\n  pre.run do\r\n    system \"git show --name-only HEAD\"\r\n  end\r\n\r\nend\r\n\r\n```\r\n\r\n\r\n**Plugin specific configurations**\r\n\r\nSometimes a plugin needs specific configurations that not match the use of a helper method. You can add plugin configurations to your Hoogfile by adding a section that is named after the plugin. Let's say there is a plugin called 'clear logs' that needs a 'truncate_line_numbers' configuration. The Hoogfile section would look like:\r\n\r\n```yaml\r\nclear logs:\r\n  truncate_line_numbers: 100\r\n```\r\n\r\nYou are able to access this configuration within your plugin by using the ```config``` method:\r\n\r\n```rb\r\ngit.describe 'clear logs' do |pre|\r\n  pre.run do\r\n    system \"sed -i '#{config.truncate_line_numbers},$ d' development.log\"\r\n  end\r\nend\r\n```\r\n\r\n\r\n## Last stuff\r\n\r\nInit and written by Daniel Schmidt (daniel.schmidt@gateprotect.com)\r\n\r\nImage \"Captain Hook\" Â© 2012 Brian Patterson\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}